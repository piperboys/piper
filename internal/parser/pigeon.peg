{
package parser

import "reflect"
import "fmt"
}

Input <- input:(sf Expression sf (ln/EOF))* EOF{
    return extractExpression(input)
}

Expression <- exp:(Operation / Group / VariableDeclaration / Function / Variable / Constant)

Operation <- left:Expression sf operator:Operator sf right:Expression {
    return extractOperation(left, operator, right)
}

Operator <- operator:(`+` / `-` / `/` / `*` / `|` / `|>`) {
    return extractOperator(operator)
}

Group <- LeftParenthesis sf expression:Expression sf RightParenthesis {
    return extractGroup(expression)
}

VariableDeclaration <- variable:Variable sf '=' sf expr:Expression {
    return extractVariableDeclaration(variable, expr)
}

Function <- argument:Variable sf `:` sf argType:Type sf LeftParenthesis sf returnType:Type sf RightParenthesis sf "->" sf expr:Expression {
    return extractFunction(argument, argType, returnType, expr)
}

Variable <- [a-zA-Z_][a-zA-Z0-9_]* {
    return extractVariable(string(c.text))
}

Type <- ("int" / "func") {
    return string(c.text), nil
}

Constant <- Integer
Integer <- integer:[0-9]+ {
    return extractInteger(integer)
}
LeftParenthesis <- `(`
RightParenthesis <- `)`


sf "spacefiller" <- [ \t]*
ln "linebreak" <- [\n\r]+
EOF<- !.
